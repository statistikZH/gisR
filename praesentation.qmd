---
title: "gisR"
author: Thomas Knecht, Ueli Mauch
subtitle: GIS-Review
date: "2024-07-11"
date-format: long
lang: de
format:
  revealjs: 
    scrollable: true
    embed-resources: true
editor: visual
execute: 
  eval: false
  echo: true
---

## Was ist R

[R](https://www.r-project.org) ist eine offene Programmiersprache welche ursprünglich für statistische Zwecke erstellt wurde.

Der Einsatzbereich von R hat sich heutzutage weit über die statistischen Anwendungen etabliert.

::: callout-note
Gerade für Data-Wrangling und Data-Engineering kommt die Stärke von R besonders zu tragen.
:::

## GIS mit R

Seit einiger Zeit hat sich R im Bereich GIS weiterentwickelt. Es lässt sich nun sehr einfach GIS-Prozesse mit Datenanalyse verbinden und es ist kein Medienbruch mehr nötig.

::: callout-note
## Packages (gleich wie libraries in python)

-   [sf](https://r-spatial.github.io/sf/): Arbeiten mit Feature Classes

-   [terra](https://rspatial.github.io/terra/): Arbeiten mit Raster-Daten

-   [stars](https://r-spatial.github.io/stars/articles/stars1.html): Arbeiten mit Spatio-Temporal Arrays
:::

::: callout-note
## Weiterführende Links

[Spatial Data Science](https://r-spatial.org/book/)

[R-Spatial](https://r-spatial.org)
:::

## Einlesen der Daten

```{r, eval = FALSE, echo = TRUE}

# Lesen der Gebäudedaten
gwr <- read.csv("https://www.web.statistik.zh.ch/ogd/daten/ressourcen/KTZH_00002022_00004064.csv") |>
  dplyr::rename_all(tolower)


# Umwandeln in ein sf-Objekt -> Geodatenobjekt
gwr_sf <- sf::st_as_sf(gwr, coords = c("e.gebaeudekoordinate", "n.gebaeudekoordinate"), crs = 2056)

# interaktives Darstellen
mapview::mapview(head(gwr_sf, 100))

gemeinden <- sf::st_read("https://maps.zh.ch/wfs/OGDZHWFS?SERVICE=WFS&VERSION=2.0.0&Request=getfeature&TYPENAME=ms:ogd-0095_arv_basis_up_gemeinden_seen_f&outputformat=geojson") |>
  dplyr::rename_all(tolower)

```

## Analysieren der Daten

```{r, eval = FALSE,  echo = TRUE}


# Matchen der Gemeindeinformation an die GWR-Daten
# Die geometrie wird hier entfernt, da die Datenanalyse danach viel schneller läuft
gwr_sf_gem <- gwr_sf |>
  dplyr::select(gebaeudekategorie_code, gebaeudekategorie_bezeichnung) |>
  sf::st_join(gemeinden) |>
  sf::st_drop_geometry()


# Berechnung der Anteile der Geböude ohne Wohnnutzung am gesamten Gebäudebestand einer Gemeinde
geb_ohne_wohnnutzung_pro_gem <- gwr_sf_gem |>
  dplyr::group_by(gebaeudekategorie_code, gebaeudekategorie_bezeichnung, bfs, gemeindename) |>
  dplyr::summarise(anzahl = dplyr::n()) |>
  dplyr::ungroup() |>
  dplyr::group_by(bfs, gemeindename) |>
  dplyr::mutate(anteil = round(anzahl/sum(anzahl)*100, 2)) |>
  dplyr::ungroup() |>
  dplyr::filter(gebaeudekategorie_code == 1060)




```

## Vorbereiten für die Karten

```{r, eval = FALSE, echo = TRUE}
# Hinzufügen der Gemeindepolygone
# Herausfiltern der Seen und fixen der Polygone
geb_ohne_wohnutzung_sf <- gemeinden  |>
  dplyr::select(bfs) |>
  dplyr::left_join(geb_ohne_wohnnutzung_pro_gem, by = "bfs") |>
  dplyr::filter(bfs != 0) |>
  sf::st_make_valid() |>
  # tmap vewendet die erste Spalte als Bezeichner, deshalb hier die Änderung in der Spaltenanordnung
  dplyr::select(gemeindename, dplyr::everything())


geb_ohne_wohnnutzung_sf_generalized <- geb_ohne_wohnutzung_sf |>
  rmapshaper::ms_simplify(keep = 0.005)

```

## Statische Karte

```{r, eval = TRUE}

## Nur für Präsentation!
geb_ohne_wohnnutzung_sf_generalized <- readRDS(here::here("extdata/data.RDS"))

# Statisches Darstellung
tmap::tm_shape(geb_ohne_wohnnutzung_sf_generalized) +
    tmap::tm_polygons("anteil")





```

## Interaktive Karte

```{r, eval = TRUE}

## Nur für Präsentation!
geb_ohne_wohnnutzung_sf_generalized <- readRDS(here::here("extdata/data.RDS"))

# Setzt tmap auf interaktiv
tmap::tmap_mode("view")

# Interaktive Darstellung
tmap::tm_shape(geb_ohne_wohnnutzung_sf_generalized) +
    tmap::tm_polygons("anteil")
```

## Remote Sensing mit R

> Extensiv genutzte Wiesen müssen mindestens einmal pro Jahr gemäht werden und das Schnittgut muss abgeführt werden. Die Flächen dürfen in Abhängigkeit der Zone jeweils **frühestens Mitte Juni** bis Mitte Juli genutzt werden[^1]

[^1]: https://www.blw.admin.ch/blw/de/home/instrumente/direktzahlungen/biodiversitaetsbeitraege.html

## Fragestellung

Gibt es Landwirtschaftsflächen mit Schnittzeitpunkt 15. Juni, welche bereits vorher gemäht wurden?

Workflow:[^2]

[^2]: Vollständiger Workflow ist in den ./scripts/ beschrieben

-   Sentinel-2 Daten herunterladen
-   NDVI berechnen
-   Statistik für Landwirtschaftsflächen errechnen

## STAC

-   SpatioTemporal Asset Catalog[^3]

-   Wir benutzen den Planetary Computer Data Catalog von Microsoft[^4]

[^3]: The [STAC specification](https://stacspec.org/en/) is a common language to describe geospatial information, so it can more easily be worked with, indexed, and discovered.

[^4]: [Planetary Computer](https://planetarycomputer.microsoft.com/catalog)

## STAC

-   Collections abfragen

```{r echo=TRUE, eval=FALSE}
stac_source <- rstac::stac(
  "https://planetarycomputer.microsoft.com/api/stac/v1",
  force_version = "1.0.0"
)
collections_query <- stac_source |>
  rstac::collections()

rstac::get_request(collections_query)

```

## STAC

```{r echo=TRUE, eval=FALSE}
# BBOX definieren
ktzh_bbox <- "8.3576933717031, \
              47.159435621727, \
              8.9849509769386, \
              47.694469737114"

# STAC Query bauen
stac_query <- rstac::stac_search(
  q = stac_source,
  collections = "sentinel-2-l2a",
  datetime = "2023-06-10/2023-06-14",
  bbox = ktzh_bbox
) |>
  rstac::ext_filter(
    `eo:cloud_cover` <= 20)

```

Filtern nach Gebiet, Zeitraum, Collection Sentinel-2-L2A. Bewölkung einschränken.

Mehr zum Download in `scripts/dlFromSTAC.R`

## Geodaten von WFS laden

```{r echo=TRUE, eval=FALSE}
wfs_zh <- "https://maps.zh.ch/wfs/OGDZHWFS"

url <- httr::parse_url(wfs_zh)
url$query <- list(service = "WFS",
                  version = "2.0.0",
                  request = "GetFeature",
                  typename = "ms:ogd-0095_arv_basis_up_bezirke_f",
                  outputformat = "geojson")

request <- httr::build_url(url)
bezirke <- sf::read_sf(request)

# Save Bezirke Layer
sf::write_sf(bezirke, "geodata/Bezirke.gpkg")
```

WFS GetFeature Request, am Beispiel der OGD Bezirksgrenzen

## Raster

-   Bänder-Kombination & Visualisierung (`terra` Package)

| ![RGB](img/sentinel-2_RGB.png) | ![FCIR](img/sentinel-2_FCIR.png) |
|:------------------------------:|:--------------------------------:|
|              RGB               |               FCIR               |

## NDVI

![[Quelle](https://www.researchgate.net/publication/341188077_Assessing_the_Effectiveness_of_Precision_Agriculture_Management_Systems_in_Mediterranean_Small_Farms)](img/NDVI.png){.center fig-align="center"}

## Rasterrechner

-   4-Band Raster als Basis
-   NDVI nach dieser Formel

$$
NDVI = \frac{NIR - R}{NIR + R}
$$

-   Berechnung simpel:

```{r echo=TRUE, eval=FALSE}
# calculate NDVI using the red (band 1) and nir (band 4) bands
sent2_ndvi <- (RGBI_zh[[4]] - RGBI_zh[[1]]) / (RGBI_zh[[4]] + RGBI_zh[[1]])

sent2_ndvi |> terra::writeRaster("geodata/ndvi_terra.tif")
```

## Statistik {.incremental}

-   Nutzflächen auswählen, Feld `area` berechnen
-   2 Filter anwenden

```{r eval=TRUE, echo=TRUE}
# Load Polygon Layer
LWNutz_Diels <- sf::read_sf("geodata/LWNutz_Dielsdorf.gpkg") |>
  dplyr::mutate(area = sf::st_area(geom))

# Set aller Flächen, die erst am 15.06. sollten geschnitten werden:
BF_Fl <- LWNutz_Diels |>
  dplyr::filter(harvest_date == "15.06.") |>
  # Drop die kleinsten Flächen unter 500 m^2
  dplyr::filter(area > units::set_units(500, "m^2"))
```

------------------------------------------------------------------------

### Zonale Statistik

-   Statistik pro Nutzfläche, jeweils der `mean` wird berechnet

```{r echo=FALSE, eval=TRUE}
sent2_ndvi <- terra::rast("geodata/ndvi_terra.tif")
BF_Fl$mean_ndvi <- exactextractr::exact_extract(sent2_ndvi, BF_Fl, 'mean', progress=FALSE,
                                 max_cells_in_memory = 1e4)
BF_Fl |> dplyr::select(c(bfs_parz, area, mean_ndvi)) |> head(4)|> knitr::kable() |> kableExtra::kable_styling(font_size = 22)
```

### Verteilung

![](img/ndvi-per-bff.png){.center fig-align="center"}

### Map

```{r eval=TRUE, echo=FALSE}
tmap::tmap_mode("view")
tmap::tmap_options(check.and.fix = TRUE)
```

```{r eval=TRUE, warning=FALSE}
# Setzt tmap auf interaktiv
border <- c(2669379, 1252226, 2684597, 1269716)
breaks <- c(-0.4, -0.2, 0, 0.2, 0.4, 1)

tmap::tm_shape(BF_Fl, bbox = border) +
tmap::tm_polygons("mean_ndvi", style = "fixed", breaks = breaks) +
tmap::tm_shape(BF_Fl |> dplyr::filter(mean_ndvi <= 0.4), bbox = border, name = "NDVI <= 0.4 ") +
tmap::tm_polygons("mean_ndvi", style = "fixed", breaks = breaks, legend.show = FALSE)
```

------------------------------------------------------------------------

```{r, eval=TRUE, echo=TRUE}
# TODO

tmap::tmap_mode("plot")
tmap::tmap_options(check.and.fix = TRUE)
border <- c(2669379, 1252226, 2684597, 1269716)
left <- tmap::tm_shape(BF_Fl,
                  bbox = border) +
tmap::tm_polygons("mean_ndvi",
            style = "fixed",
            breaks = c(-0.4, -0.2, 0, 0.2, 0.4, 1)
            ) +
  tmap::tm_layout(title="ii")
right <- tmap::tm_shape(BF_Fl |> 
                    dplyr::filter(mean_ndvi <= 0.4),
                  bbox = border) +
  tmap::tm_polygons("mean_ndvi",
              style = "fixed",
              breaks = c(-0.4, -0.2, 0, 0.2, 0.4, 1)
  )
```

------------------------------------------------------------------------

```{r eval=TRUE, warning=FALSE, echo=FALSE}
plt <- tmap::tmap_arrange(
  left,
  right
)
plt |> tmap::tmap_save("img/tmp.png", width = 11, height = 7)
```

![](img/tmp.png)

------------------------------------------------------------------------

```{r echo=TRUE, eval=TRUE}
# TODO table
BF_Fl |> dplyr::filter(`mean_ndvi` <= 0.4) |> 
  dplyr::select(c("blw_name","region","mean_ndvi", "area")) |>
  sf::st_drop_geometry() |> head(10) |> 
  knitr::kable() |> kableExtra::kable_styling(font_size = 22)
```

------------------------------------------------------------------------

## Fragen?
